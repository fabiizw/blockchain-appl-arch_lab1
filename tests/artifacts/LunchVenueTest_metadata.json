{
	"compiler": {
		"version": "0.8.5+commit.a4f2e591"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "friendAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "addFriend",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "addRestaurant",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "beforeAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "restaurant",
						"type": "uint256"
					}
				],
				"name": "doVote",
				"outputs": [
					{
						"internalType": "bool",
						"name": "validVote",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "friends",
				"outputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "bool",
						"name": "voted",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lunchVenueTest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "manager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "managerTest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numFriends",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numRestaurants",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numVotes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "restaurants",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "setFriend",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "setFriendFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "setRestaurant",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "setRestaurantFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vote2",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vote3",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteAfterClosedFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteOpen",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteOpenTest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votedRestaurant",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "votes",
				"outputs": [
					{
						"internalType": "address",
						"name": "voterAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "restaurant",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addFriend(address,string)": {
					"details": "To simplify the code duplication of friends is not checked",
					"params": {
						"friendAddress": "Friend's account/address",
						"name": "Friend's name"
					},
					"returns": {
						"_0": "Number of friends added so far"
					}
				},
				"addRestaurant(string)": {
					"details": "To simplify the code, duplication of restaurants isn't checked",
					"params": {
						"name": "Restaurant name"
					},
					"returns": {
						"_0": "Number of restaurants added so far"
					}
				},
				"doVote(uint256)": {
					"details": "To simplify the code duplicate votes by a friend is not checked",
					"params": {
						"restaurant": "Restaurant number being voted"
					},
					"returns": {
						"validVote": "Is the vote valid? A valid vote should be from a registered  friend to a registered restaurant"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addFriend(address,string)": {
					"notice": "Add a new friend to voter list"
				},
				"addRestaurant(string)": {
					"notice": "Add a new restaurant"
				},
				"beforeAll()": {
					"notice": "'beforeAll' runs before all other tests More special functions are: 'beforeEach', 'beforeAll', 'afterEach' & 'afterAll'"
				},
				"doVote(uint256)": {
					"notice": "Vote for a restaurant"
				},
				"lunchVenueTest()": {
					"notice": "Verify lunch venue is set correctly"
				},
				"managerTest()": {
					"notice": "Check manager account-0 is the default account that deploy contract, so it should be the manager (i.e., acc0)"
				},
				"setFriend()": {
					"notice": "Set friends as account-0 #sender doesn't need to be specified explicitly for account-0"
				},
				"setFriendFailure()": {
					"notice": "Try adding friend as a user other than manager. This should fail"
				},
				"setRestaurant()": {
					"notice": "Add restuarant as manager When msg.sender isn't specified, default account (i.e., account-0) is the sender"
				},
				"setRestaurantFailure()": {
					"notice": "Try to add a restaurant as a user other than manager. This should fail #sender: account-1"
				},
				"vote()": {
					"notice": "Vote as Bob (acc1) #sender: account-1"
				},
				"vote2()": {
					"notice": "Vote as Charlie #sender: account-2"
				},
				"vote3()": {
					"notice": "Vote as Eve #sender: account-3"
				},
				"voteAfterClosedFailure()": {
					"notice": "Verify voting after vote closed. This should fail"
				},
				"voteFailure()": {
					"notice": "Try voting as a user not in the friends list. This should fail #sender: account-4"
				},
				"voteOpenTest()": {
					"notice": "Verify voting is now closed"
				}
			},
			"notice": "Inherit 'LunchVenue' contract",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"tests/LunchVenue_updated_test.sol": "LunchVenueTest"
		},
		"evmVersion": "berlin",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/LunchVenue.sol": {
			"keccak256": "0x2a333063a2fb1d3f8bda9ceb5f05678277176d7733af1e4b935323dd4e50610d",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://6d57864b401e81dd60ffe2daecf354affa05c0873e6dff3054459b5361d2e202",
				"dweb:/ipfs/QmNbNtsEocdqpT5c9Pfs2MU6GtCQFchP5U4NLxBKjuC6Mq"
			]
		},
		"remix_accounts.sol": {
			"keccak256": "0xab088ffd1cd1033f54c2486f151b5d02281a3b76724c8e6f48479c25a4f7809e",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://5ddaf9976b1838f7028cbedfaf7f6e1cf8c898e100221176ff1406ee8b599f23",
				"dweb:/ipfs/QmX2FYLXYyo5Cn55ZX2CfngpscSh4mQhcMVzQdQsh2vqcG"
			]
		},
		"remix_tests.sol": {
			"keccak256": "0xe2783cdc204cba8c72494119339f1d90f9022b15d6c718c668b7f097d8e29787",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://bb6a22e64c7f16bcaab63b1c1a1b269d5be8a6d37bdd9dec1718477ab916b18e",
				"dweb:/ipfs/QmdkW1tT5iadBvaHMCoskhDGZKnfdg8o1D9CcoQYtdJet7"
			]
		},
		"tests/LunchVenue_updated_test.sol": {
			"keccak256": "0xe811d5a729b902b03b41710688ca4442772de834bf78441cbb6000f073ecd037",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://b0f3bb8b587aa8cded3ef9fea21301961374c319d4e3fc9607ce250e2c9fdfe3",
				"dweb:/ipfs/QmchcF4xQ6dtF3bVyzoa8nxQtaALwmStWrezsuLzpuJsRq"
			]
		}
	},
	"version": 1
}